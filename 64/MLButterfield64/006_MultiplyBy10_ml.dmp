00001  0000             *=$0880
00002  0880             
00003  0880             ;PROGRAM TO MULTIPLY BY TEN FIRST GETTING A NUMBER, AND MULTIPLYING BY 2 TWO TIMES
00004  0880             ;THEN ADDING THE ORIGINAL NUMBER BACK AND FINAL MULTIPLYING BY 2
00005  0880             ;(((X*2)*2)+X)*2=X*10
00006  0880             
00007  0880             
00008  0880             ;INDIRECT ADDRESSING GET THE MEMORY POSITION ON $2D LOW BYTE AND $2E HIGH BYTE
00009  0880             ;CONTAINING THE SOV START OF VARIABLE POINTER FOR BASIC
00010  0880             ;EXTRACT THE FIRST BASIC VARIABLE
00011  0880                        ;HIGH BYTE PROCESSING BASIC INTEGERS ARE STORED HIGH BYTE/LOW BYTE
00012  0880  A0 02                 LDY #$02
00013  0882  B1 2D                 LDA ($2D),Y ;LOAD THE HIGH BYTE
00014  0884                        ;STORE THE HIGH BYTE TWICE TO AID IN MULTIPLYING BY 10
00015  0884  8D 3C 03              STA $033C
00016  0887  8D 3E 03              STA $033E
00017  088A                        ;LOW BYTE PROCESSING
00018  088A  A0 03                 LDY #$03
00019  088C  B1 2D                 LDA ($2D),Y ;LOAD THE LOW BYTE
00020  088E                        ;STORE THE LOW BYTE TWICE TO AID IN MULTIPLYING BY 10
00021  088E  8D 3D 03              STA $033D
00022  0891  8D 3F 03              STA $033F
00023  0894             
00024  0894             ;MULTIPLY (((X*2)*2)+X)*2=X*10
00025  0894                        ;MULTIPLY X*2
00026  0894  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00027  0897  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00028  089A                        ;MULTIPLY X*2
00029  089A  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00030  089D  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00031  08A0                        ;ADD X
00032  08A0  18                    CLC ;CLEAR THE CARRY FOR ADDITION
00033  08A1  AD 3D 03              LDA $033D ;LOAD THE LOW BYTE THA WAS MULTIPLIED TWICE X*2*2
00034  08A4  6D 3F 03              ADC $033F ;ADD AND KEEP THE CARRY FOR THE LOW BYTE OF X
00035  08A7  8D 3D 03              STA $033D ;SAVE RESULT
00036  08AA  AD 3C 03              LDA $033C ;LOAD THE HIGH BYTE THA WAS MULTIPLIED TWICE X*2*2
00037  08AD  6D 3E 03              ADC $033E ;ADD AND KEEP THE CARRY FOR THE HIGH BYTE OF X
00038  08B0  8D 3C 03              STA $033C ;SAVE RESULT
00039  08B3                        ;MULTIPLY X*2
00040  08B3  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00041  08B6  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00042  08B9             
00043  08B9             ;SAVE BACK TO THE ORIGINAL VARIABLE POSITION
00044  08B9  A0 02                 LDY #$02
00045  08BB  AD 3C 03              LDA $033C
00046  08BE  91 2D                 STA ($2D),Y ;SAVE THE HIGH BYTE
00047  08C0  A0 03                 LDY #$03
00048  08C2  AD 3D 03              LDA $033D
00049  08C5  91 2D                 STA ($2D),Y ;SAVE THE LOW BYTE
00050  08C7             
00051  08C7             ;SAVE THE START OF VARIABLE POINTER AFTER THE MACHINE LANGUAGE ON POSITION $08D0
00052  08C7  A9 D0                 LDA #$D0
00053  08C9  85 2D                 STA $2D
00054  08CB  A9 08                 LDA #$08
00055  08CD  85 2E                 STA $2E
00056  08CF  60                    RTS
00057  08D0             

******* 0 Label(s) *******

******* 0 Unused label(s) *******

******* 1 Variable(s) *******
tgt_c64  = $0001
******* 1 Unused variables(s) *******
tgt_c64

