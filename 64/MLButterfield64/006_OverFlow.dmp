00001  0000             *=$0880
00002  0880             
00003  0880             ;PROGRAM TO MULTIPLY BY TEN FIRST GETTING A NUMBER, AND MULTIPLYING BY 2 TWO TIMES
00004  0880             ;THEN ADDING THE ORIGINAL NUMBER BACK AND FINAL MULTIPLYING BY 2
00005  0880             ;(((X*2)*2)+X)*2=X*10
00006  0880             
00007  0880             
00008  0880             ;INDIRECT ADDRESSING GET THE MEMORY POSITION ON $2D LOW BYTE AND $2E HIGH BYTE
00009  0880             ;CONTAINING THE SOV START OF VARIABLE POINTER FOR BASIC
00010  0880             ;EXTRACT THE FIRST BASIC VARIABLE
00011  0880                        ;HIGH BYTE PROCESSING BASIC INTEGERS ARE STORED HIGH BYTE/LOW BYTE
00012  0880  A0 02                 LDY #$02
00013  0882  B1 2D                 LDA ($2D),Y ;LOAD THE HIGH BYTE
00014  0884                        ;STORE THE HIGH BYTE TWICE TO AID IN MULTIPLYING BY 10
00015  0884  8D 3C 03              STA $033C
00016  0887  8D 3E 03              STA $033E
00017  088A                        ;LOW BYTE PROCESSING
00018  088A  A0 03                 LDY #$03
00019  088C  B1 2D                 LDA ($2D),Y ;LOAD THE LOW BYTE
00020  088E                        ;STORE THE LOW BYTE TWICE TO AID IN MULTIPLYING BY 10
00021  088E  8D 3D 03              STA $033D
00022  0891  8D 3F 03              STA $033F
00023  0894             
00024  0894             ;MULTIPLY (((X*2)*2)+X)*2=X*10
00025  0894                        ;MULTIPLY X*2
00026  0894  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00027  0897  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00028  089A  B0 3C                 BCS OVERFLOW
00029  089C                        ;MULTIPLY X*2
00030  089C  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00031  089F  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00032  08A2  B0 34                 BCS OVERFLOW
00033  08A4                        ;ADD X
00034  08A4  18                    CLC ;CLEAR THE CARRY FOR ADDITION
00035  08A5  AD 3D 03              LDA $033D ;LOAD THE LOW BYTE THA WAS MULTIPLIED TWICE X*2*2
00036  08A8  6D 3F 03              ADC $033F ;ADD AND KEEP THE CARRY FOR THE LOW BYTE OF X
00037  08AB  8D 3D 03              STA $033D ;SAVE RESULT
00038  08AE  AD 3C 03              LDA $033C ;LOAD THE HIGH BYTE THA WAS MULTIPLIED TWICE X*2*2
00039  08B1  6D 3E 03              ADC $033E ;ADD AND KEEP THE CARRY FOR THE HIGH BYTE OF X
00040  08B4  B0 22                 BCS OVERFLOW
00041  08B6  8D 3C 03              STA $033C ;SAVE RESULT
00042  08B9                        ;MULTIPLY X*2
00043  08B9  0E 3D 03              ASL $033D ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00044  08BC  2E 3C 03              ROL $033C ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00045  08BF  B0 17                 BCS OVERFLOW
00046  08C1             
00047  08C1             ;SAVE BACK TO THE ORIGINAL VARIABLE POSITION
00048  08C1  A0 02                 LDY #$02
00049  08C3  AD 3C 03              LDA $033C
00050  08C6  91 2D                 STA ($2D),Y ;SAVE THE HIGH BYTE
00051  08C8  A0 03                 LDY #$03
00052  08CA  AD 3D 03              LDA $033D
00053  08CD  91 2D                 STA ($2D),Y ;SAVE THE LOW BYTE
00054  08CF             
00055  08CF             ;SAVE THE START OF VARIABLE POINTER AFTER THE MACHINE LANGUAGE ON POSITION $08D0
00056  08CF  A9 00                 LDA #$00
00057  08D1  85 2D                 STA $2D
00058  08D3  A9 09                 LDA #$09
00059  08D5  85 2E                 STA $2E
00060  08D7  60                    RTS
00061  08D8             
00062  08D8             OVERFLOW
00063  08D8  A2 00                 LDX #$00
00064  08DA  BD F7 08              LDA $08F7,X
00065  08DD  20 D2 FF              JSR $FFD2
00066  08E0  E8                    INX
00067  08E1  E0 09                 CPX #$9
00068  08E3  D0 F5                 BNE $08DA
00069  08E5  60                    RTS
00070  08E6             *=$08F7
00071  08F7  4F 56 45              BYTE    $4F, $56, $45, $52, $46,$4C,$4F,$57,$0D ;LAST CHAR IS CARRIEGE RETURN
00072  0900             

******* 1 Label(s) *******
OVERFLOW = $08D8 

******* 1 Unused label(s) *******
OVERFLOW

******* 1 Variable(s) *******
tgt_c64  = $0001
******* 1 Unused variables(s) *******
tgt_c64

