00001  0000             *=$1CB0    ;START AFTER BASIC THE PROGRAM STARTS AT $1C01
00002  1CB0             
00003  1CB0             ;PROGRAM TO MULTIPLY BY TEN FIRST GETTING A NUMBER, AND MULTIPLYING BY 2 TWO TIMES
00004  1CB0             ;THEN ADDING THE ORIGINAL NUMBER BACK AND FINAL MULTIPLYING BY 2
00005  1CB0             ;(((X*2)*2)+X)*2=X*10
00006  1CB0             
00007  1CB0             
00008  1CB0             ;INDIRECT ADDRESSING GET THE MEMORY POSITION ON $2F LOW BYTE AND $30 HIGH BYTE
00009  1CB0             ;CONTAINING THE SOV START OF VARIABLE POINTER FOR BASIC IN BANK 1 OF COMMODORE 128
00010  1CB0             ;EXTRACT THE FIRST BASIC VARIABLE
00011  1CB0                        ;HIGH BYTE PROCESSING BASIC INTEGERS ARE STORED HIGH BYTE/LOW BYTE
00012  1CB0  A0 02                 LDY #$02 ;SKIP THE BYTES FOR THE VARIABLE NAME
00013  1CB2  78                    SEI ;STOP INTERRUPTS WHILE ACCESING BANK 1
00014  1CB3  A9 2F                 LDA #$2F ;LOAD THE INDIRECT ADDRESS OF FIRST VARIABLE IN BANK 1 LOW BYTE
00015  1CB5  A2 01                 LDX #$01 ; SELECT BANK1
00016  1CB7  20 74 FF              JSR $FF74 ; LOAD FROM ANY MEMORY BANK WITH INDFET (INDIRECT FETCH)
00017  1CBA                        ;STORE THE HIGH BYTE TWICE TO AID IN MULTIPLYING BY 10
00018  1CBA  8D 00 0B              STA $0B00
00019  1CBD  8D 02 0B              STA $0B02
00020  1CC0                        ;LOW BYTE PROCESSING
00021  1CC0  A0 03                 LDY #$03
00022  1CC2  A9 2F                 LDA #$2F ;LOAD THE INDIRECT ADDRESS OF FIRST VARIABLE IN BANK 1 LOW BYTE
00023  1CC4  A2 01                 LDX #$01 ; SELECT BANK1
00024  1CC6  20 74 FF              JSR $FF74 ; LOAD FROM ANY MEMORY BANK WITH INDFET (INDIRECT FETCH)
00025  1CC9  58                    CLI ; TURN ON INTERRUPTS AGAIN
00026  1CCA                        ;STORE THE LOW BYTE TWICE TO AID IN MULTIPLYING BY 10
00027  1CCA  8D 01 0B              STA $0B01
00028  1CCD  8D 03 0B              STA $0B03
00029  1CD0             
00030  1CD0             ;MULTIPLY (((X*2)*2)+X)*2=X*10
00031  1CD0                        ;MULTIPLY X*2
00032  1CD0  0E 01 0B              ASL $0B01 ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00033  1CD3  2E 00 0B              ROL $0B00 ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00034  1CD6                        ;MULTIPLY X*2
00035  1CD6  0E 01 0B              ASL $0B01 ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00036  1CD9  2E 00 0B              ROL $0B00 ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00037  1CDC                        ;ADD X
00038  1CDC  18                    CLC ;CLEAR THE CARRY FOR ADDITION
00039  1CDD  AD 01 0B              LDA $0B01 ;LOAD THE LOW BYTE THA WAS MULTIPLIED TWICE X*2*2
00040  1CE0  6D 03 0B              ADC $0B03 ;ADD AND KEEP THE CARRY FOR THE LOW BYTE OF X
00041  1CE3  8D 01 0B              STA $0B01 ;SAVE RESULT
00042  1CE6  AD 00 0B              LDA $0B00 ;LOAD THE HIGH BYTE THA WAS MULTIPLIED TWICE X*2*2
00043  1CE9  6D 02 0B              ADC $0B02 ;ADD AND KEEP THE CARRY FOR THE HIGH BYTE OF X
00044  1CEC  8D 00 0B              STA $0B00 ;SAVE RESULT
00045  1CEF                        ;MULTIPLY X*2
00046  1CEF  0E 01 0B              ASL $0B01 ;SHIFT WITHOUT TAKING IN THE CARRY AND USING A ZERO FOR THE LOW BYTE
00047  1CF2  2E 00 0B              ROL $0B00 ;SHIFT TAKING INTO ACCOUNT THE CARRY FROM THE LOW BYTE
00048  1CF5             
00049  1CF5             ;SAVE BACK TO THE ORIGINAL VARIABLE POSITION
00050  1CF5  78                    SEI ;STOP INTERRUPTS WHILE ACCESING BANK 1
00051  1CF6  A0 02                 LDY #$02
00052  1CF8  A9 2F                 LDA #$2F ;LOAD THE INDIRECT ADDRESS OF FIRST VARIABLE IN BANK 1 LOW BYTE
00053  1CFA  8D B9 02              STA $02B9 ;STORE THE INDIRECT VARIABLE WITH THE PLACE TO WRITE
00054  1CFD  A2 01                 LDX #$01 ; SELECT BANK1
00055  1CFF  AD 00 0B              LDA $0B00 ; THE INTEGER HIGH BYTES
00056  1D02  20 77 FF              JSR $FF77 ; CALL INDSTA THE INDIRECT STASH SUBROUTINE
00057  1D05             
00058  1D05  A0 03                 LDY #$03
00059  1D07  A2 01                 LDX #$01 ; SELECT BANK1
00060  1D09  AD 01 0B              LDA $0B01 ; THE INTEGER LOW BYTES
00061  1D0C  20 77 FF              JSR $FF77 ; CALL INDSTA THE INDIRECT STASH SUBROUTINE
00062  1D0F  58                    CLI ; TURN ON INTERRUPTS AGAIN
00063  1D10  60                    RTS
00064  1D11             
00065  1D11             ;SAVE THE END OF BASIC POINTER AFTER THE MACHINE LANGUAGE ON POSITION $1D1D
00066  1D11  A9 1D                 LDA #$1D
00067  1D13  8D 10 12              STA $1210
00068  1D16  A9 1D                 LDA #$1D
00069  1D18  8D 11 12              STA $1211
00070  1D1B  60                    RTS
00071  1D1C             

******* 0 Label(s) *******

******* 0 Unused label(s) *******

******* 1 Variable(s) *******
tgt_c128  = $0001
******* 1 Unused variables(s) *******
tgt_c128

